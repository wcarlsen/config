#+TITLE: Emacs config
#+AUTHOR: wcarlsen
#+PROPERTY: header-args:emacs-lisp :results silent

* Theme

** Catppuccin
Catppuccin theme.
#+begin_src emacs-lisp
  (use-package catppuccin-theme
    :config (load-theme 'catppuccin :no-confirm))
#+end_src

* Modeline

** Doom-line
Doom-modeline.
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :after nerd-icons
    :init (doom-modeline-mode 1))

  ;; display icons
  (use-package nerd-icons)
#+end_src

* Font

** FantasqueSans
Comic sans like font.
#+begin_src emacs-lisp
  (set-frame-font "FantasqueSansM Nerd Font" nil t)
#+end_src

** Size
Set font size.
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :height 130)
#+end_src

* Org

** Org-mordern
Pretty bullets.
#+begin_src emacs-lisp
  (use-package org-modern
    :hook (org-mode . org-modern-mode))
#+end_src

* Terminal

** Vterm
Most terminal like emulator.
#+begin_src emacs-lisp
  (use-package vterm)
#+end_src

* Git

** Magit
Interactive git.
#+begin_src emacs-lisp
  (use-package magit)
#+end_src

** Diff-hl
Git gutter.
#+begin_src emacs-lisp
  (use-package diff-hl
    :config (global-diff-hl-mode))
#+end_src

* Completion

** Corfu
Completion in region function.
#+begin_src emacs-lisp
  (use-package corfu
    :custom
    (corfu-cycle t)
    (corfu-auto t)
    :init
    (global-corfu-mode))
#+end_src

* Languages

** Nix
Nix major mode.
#+begin_src emacs-lisp
  (use-package nix-mode
    :mode "\\.nix\\'")
#+end_src

** Golang
Go major mode.
#+begin_src emacs-lisp
  (use-package go-mode
    :config (add-hook 'go-mode-hook (lambda () (setq tab-width 4
  						   indent-tabs-mode 1))))
#+end_src

** Terraform
Terraform major mode.
#+begin_src emacs-lisp
  (use-package terraform-mode)
#+end_src

** Dockerfile
Dockerfile major mode.
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :config (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
#+end_src

** Yaml
Yaml major mode.
#+begin_src emacs-lisp
  (use-package yaml-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
    (add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode))
    (add-hook 'yaml-mode-hook
    '(lambda ()
       (define-key yaml-mode-map "\C-m" 'newline-and-indent))))
#+end_src

* Misc

** Bars

*** Toolbar
Disable toolbar.
#+begin_src emacs-lisp
  (tool-bar-mode -1)
#+end_src

*** Scrollbar
Disable scrollbar.
#+begin_src emacs-lisp
  (scroll-bar-mode -1)
#+end_src

*** Menubar
Disable menubar.
#+begin_src emacs-lisp
  (menu-bar-mode -1)
#+end_src

** Backup files
Disable backup files.
#+begin_src emacs-lisp
  (setq make-backup-files nil
        auto-save-default nil)
#+end_src

** Padding

*** Spacious-padding
Increase the spacing/padding of Emacs windows and frames.
#+begin_src emacs-lisp
  (use-package spacious-padding
    :config (spacious-padding-mode))
#+end_src

** Highlight line
Enable highlight line.
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook #'hl-line-mode)
  (add-hook 'text-mode-hook #'hl-line-mode)
#+end_src

** Parens
*** Rainbow-delimeters
Colored parens.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

*** Smartparens
Auto pair parens.
#+begin_src emacs-lisp
  (use-package smartparens
    :config
    (require 'smartparens-config)
    (smartparens-global-mode))
#+end_src

** Indent-guide
Show identation.
#+begin_src emacs-lisp
  (use-package indent-guide
    :config
    (indent-guide-global-mode))
#+end_src

** Sound
Disable ring bell (also visual indicator).
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

** Word wrap
Enable word wrap.
#+begin_src emacs-lisp
  (global-visual-line-mode t)
#+end_src

** Projectile
Project management.
#+begin_src emacs-lisp
    (use-package projectile
      :config
      (projectile-mode +1)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
      (setq projectile-project-search-path '("~/spaghetti/"))
      (projectile-discover-projects-in-search-path))
#+end_src

** Exec-path-from-shell
Ensure environment variables inside Emacs look the same as in the user's shell.
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-initialize))
#+end_src

** Line-number
Enable line-number-mode.
#+begin_src emacs-lisp
  ;; (line-number-mode)
#+end_src

** Which-keys
Show keyboard shortcut guide.
#+begin_src emacs-lisp
  (which-key-mode)
#+end_src

* Minibuffer

** Vertico
Minibuffer framework.
#+begin_src emacs-lisp
  (use-package vertico
    :custom
    (vertico-resize t)
    (vertico-cycle t)
    :init
    (vertico-mode))
#+end_src

** Vertico-posframe
Make minibuffer float.
#+begin_src emacs-lisp
  (use-package vertico-posframe
    :config
    (vertico-posframe-mode 1)
    (setq vertico-posframe-parameters
  	 '((left-fringe . 8)
  	   (right-fringe . 8))))
#+end_src

** Marginelia
Marks or annotations placed at the margin of the page of a book or in this case helpful colorful annotations placed at the margin of the minibuffer for your completion candidates.
#+begin_src emacs-lisp
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    :init
    (marginalia-mode))
#+end_src

** Orderless
More flexible and powerful than the default completion styles.
#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (orderless-component-separator #'orderless-escapable-split-on-space)
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))
#+end_src

* File explorer

** Treemacs
File and project explorer similar to NeoTree or vimâ€™s NerdTree.
#+begin_src emacs-lisp
  (use-package treemacs
    :custom
    (treemacs-position 'right)
    (treemacs-project-follow-mode t)
    (treemacs-filewatch-mode t))
#+end_src

** Treemacs-projectile
Make projects discovery possible in treemacs.
#+begin_src emacs-lisp
  (use-package treemacs-projectile
    :after (treemacs projectile))
#+end_src

** Treemacs-magit
#+begin_src emacs-lisp
  (use-package treemacs-magit
    :after (treemacs magit))
#+end_src
