#+TITLE: Emacs config
#+AUTHOR: wcarlsen
#+PROPERTY: header-args:emacs-lisp :results silent

* UI

** Theme
Catppuccin theme.
#+begin_src emacs-lisp
  (use-package catppuccin-theme
    :config (load-theme 'catppuccin :no-confirm))
#+end_src

** Modeline
Doom-modeline.
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))

  (use-package nerd-icons)
#+end_src

** Bars

*** Toolbar
Disable toolbar.
#+begin_src emacs-lisp
  (tool-bar-mode -1)
#+end_src

*** Scrollbar
Disable scrollbar.
#+begin_src emacs-lisp
  (scroll-bar-mode -1)
#+end_src

** Font
FatasqueSans comic sans like font.
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :height 130)
  (set-frame-font "FantasqueSansM Nerd Font" nil t)
#+end_src

** Highlight line
Highlight current line.
#+begin_src emacs-lisp
  (global-hl-line-mode t)
#+end_src

** Minibuffer
Vertico.
#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
		    (replace-regexp-in-string
		     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		     crm-separator)
		    (car args))
	    (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
	  '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles partial-completion)))))

  (use-package vertico-posframe
    :config
    (vertico-posframe-mode 1)
    (setq vertico-posframe-parameters
	'((left-fringe . 8)
	  (right-fringe . 8))))
#+end_src

** Beacon
Never lose cursor.
#+begin_src emacs-lisp
  (use-package beacon
    :config
    (beacon-mode 1))
#+end_src

** Word wrap
Enable word wrap.
#+begin_src emacs-lisp
  (global-visual-line-mode t)
#+end_src

** Rainbow-delimeters
Colored parens.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

** Indent-guide
Show identation.
#+begin_src emacs-lisp
  (use-package indent-guide
    :config
    (add-hook 'prog-mode-hook #'indent-guide-mode))
#+end_src

** Which-key
Show available shortcuts.
#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+end_src

* Org

** Org-bullets
Pretty bullets.
#+begin_src emacs-lisp
  (use-package org-modern
    :hook (org-mode . org-modern-mode))
#+end_src

* Completion

** Company
Completion egine.
#+begin_src emacs-lisp
  (use-package company
    :config
    (global-company-mode)
    (setq company-idle-delay 0.0)
    (setq company-minimum-prefix-length 1))
#+end_src

** Yasnippet
Template system.
#+begin_src emacs-lisp
  (use-package yasnippet
    :hook (prog-mode . yas-minor-mode))

  (use-package yasnippet-snippets)
#+end_src

* Languages

** Nix

*** Nix-mode
Nix major mode.
#+begin_src emacs-lisp
  (use-package nix-mode
    :mode "\\.nix\\'"
    :hook (nix-mode . eglot-ensure))
#+end_src

** Terraform
Terraform major mode.
#+begin_src emacs-lisp
  (use-package terraform-mode
    :hook (terraform-mode . eglot-ensure))
#+end_src

** Go
Major mode Go.
#+begin_src emacs-lisp
  (use-package go-mode
    :hook (go-mode . eglot-ensure)
    :config (add-hook 'go-mode-hook (lambda () (setq tab-width 4
						     indent-tabs-mode 1))))
#+end_src

** Dockerfile
Major mode dockerfile.
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :config (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
#+end_src

** Yaml
Major mode yaml.
#+begin_src emacs-lisp
  (use-package yaml-mode
    :hook (yaml-mode . eglot-ensure)
    :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
    (add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode))
    (add-hook 'yaml-mode-hook
    '(lambda ()
       (define-key yaml-mode-map "\C-m" 'newline-and-indent))))
#+end_src

* Project management
Projectile.
#+begin_src emacs-lisp
  (use-package projectile
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (setq projectile-project-search-path '("~/spaghetti/"))
    (projectile-discover-projects-in-search-path))
#+end_src

* File explorer

** Treemacs
Complex file explorer.
#+begin_src emacs-lisp
  (use-package treemacs
    :config
    (setq treemacs-position 'right)
    (setq treemacs-project-follow-mode t))

  (use-package treemacs-projectile
    :after (treemacs projectile))

  (use-package treemacs-magit
      :after (treemacs projectile))
#+end_src

* Terminal
Vterm.
#+begin_src emacs-lisp
  (use-package vterm)
#+end_src

* Git

** Magit
Interactive git.
#+begin_src emacs-lisp
  (use-package magit)
#+end_src

** Gutter
Diff-hl.
#+begin_src emacs-lisp
  (use-package diff-hl
    :config (global-diff-hl-mode))
#+end_src

* Misc

** Sound
Disable ring bell (also visual indicator).
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

** Smartparens
Auto pair parens.
#+begin_src emacs-lisp
  (use-package smartparens
    :config
    (require 'smartparens-config)
    (smartparens-global-mode))
#+end_src

** Backup files
Disable backup files.
#+begin_src emacs-lisp
  (setq make-backup-files nil)
#+end_src  (require 'treesi)
