#+TITLE: Emacs config
#+AUTHOR: wcarlsen
#+PROPERTY: header-args:emacs-lisp :results silent

* Theme

** Catppuccin
Catppuccin theme.
#+begin_src emacs-lisp
  (use-package catppuccin-theme
    :config (load-theme 'catppuccin :no-confirm))
#+end_src

* Modeline

** Doom-line
Doom-modeline.
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :after nerd-icons
    :init (doom-modeline-mode 1))

  ;; display icons
  (use-package nerd-icons)
#+end_src

* Minibuffer

** Vertico
Minibuffer framework.
#+begin_src emacs-lisp
  (use-package vertico
      :init
      (vertico-mode))
#+end_src

** Emacs
A few more useful configurations.
#+begin_src emacs-lisp
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
		    (replace-regexp-in-string
		     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		     crm-separator)
		    (car args))
	    (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
	  '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Support opening new minibuffers from inside existing minibuffers.
    (setq enable-recursive-minibuffers t)

    ;; Emacs 28 and newer: Hide commands in M-x which do not work in the current
    ;; mode.  Vertico commands are hidden in normal buffers. This setting is
    ;; useful beyond Vertico.
    (setq read-extended-command-predicate #'command-completion-default-include-p))
#+end_src

** Orderless
Optionally use the `orderless' completion style.
#+begin_src emacs-lisp
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Vertico-pos
Make minibuffer float.
#+begin_src emacs-lisp
  (use-package vertico-posframe
    :config
    (vertico-posframe-mode 1)
    (setq vertico-posframe-parameters
	 '((left-fringe . 8)
	   (right-fringe . 8))))
#+end_src

* Font

** FantasqueSans
Comic sans like font.
#+begin_src emacs-lisp
  (set-frame-font "FantasqueSansM Nerd Font" nil t)
#+end_src

** Size
Set font size.
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :height 130)
#+end_src

* Org

** Org-mordern
Pretty bullets.
#+begin_src emacs-lisp
  (use-package org-modern
    :hook (org-mode . org-modern-mode))
#+end_src

* Git

** Magit
Interactive git.
#+begin_src emacs-lisp
  (use-package magit)
#+end_src

** Diff-hl
Git gutter.
#+begin_src emacs-lisp
  (use-package diff-hl
    :config (global-diff-hl-mode))
#+end_src

* Terminal

** Vterm
Most terminal like emulator.
#+begin_src emacs-lisp
  (use-package vterm)
#+end_src

* Completion

** Corfu
Completion in region function.
#+begin_src emacs-lisp
  (use-package corfu
    ;; Optional customizations
    :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :init
    (global-corfu-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    ;; (setq completion-cycle-threshold 3)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete)

    ;; Emacs 30 and newer: Disable Ispell completion function. As an alternative,
    ;; try `cape-dict'.
    (setq text-mode-ispell-word-completion nil)

    ;; Emacs 28 and newer: Hide commands in M-x which do not apply to the current
    ;; mode.  Corfu commands are hidden, since they are not used via M-x. This
    ;; setting is useful beyond Corfu.
    (setq read-extended-command-predicate #'command-completion-default-include-p))
#+end_src

* Treesitter

** Tree-sitter
Install tree-sitter
#+begin_src emacs-lisp
  (use-package tree-sitter)
  (use-package tree-sitter-langs)
#+end_src

* Languages

** Nix
Nix major mode.
#+begin_src emacs-lisp
  (use-package nix-mode
    :mode "\\.nix\\'"
    :hook (nix-mode . eglot-ensure))
#+end_src

** Golang
Go major mode.
#+begin_src emacs-lisp
  (use-package go-mode
    :hook (go-mode . eglot-ensure)
    :config (add-hook 'go-mode-hook (lambda () (setq tab-width 4
						     indent-tabs-mode 1))))
#+end_src

** Terraform
Terraform major mode.
#+begin_src emacs-lisp
  (use-package terraform-mode
    :hook (terraform-mode . eglot-ensure))
#+end_src

** Dockerfile
Dockerfile major mode.
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :config (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
#+end_src

** Yaml
Yaml major mode.
#+begin_src emacs-lisp
  (use-package yaml-mode
    :hook (yaml-mode . eglot-ensure)
    :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
    (add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode))
    (add-hook 'yaml-mode-hook
    '(lambda ()
       (define-key yaml-mode-map "\C-m" 'newline-and-indent))))
#+end_src

* Misc

** Bars

*** Toolbar
Disable toolbar.
#+begin_src emacs-lisp
  (tool-bar-mode -1)
#+end_src

*** Scrollbar
Disable scrollbar.
#+begin_src emacs-lisp
  (scroll-bar-mode -1)
#+end_src

*** Menubar
Disable menubar.
#+begin_src emacs-lisp
  (menu-bar-mode -1)
#+end_src

** Backup files
Disable backup files.
#+begin_src emacs-lisp
  (setq make-backup-files nil)
#+end_src

** Padding

*** Spacious-padding
Increase the spacing/padding of Emacs windows and frames.
#+begin_src emacs-lisp
  (use-package spacious-padding
    :config (spacious-padding-mode))
#+end_src

** Highlight line
Enable highlight line.
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook #'hl-line-mode)
  (add-hook 'text-mode-hook #'hl-line-mode)
#+end_src

** Parens
*** Rainbow-delimeters
Colored parens.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

*** Smartparens
Auto pair parens.
#+begin_src emacs-lisp
  (use-package smartparens
    :config
    (require 'smartparens-config)
    (smartparens-global-mode))
#+end_src

** Indent-guide
Show identation.
#+begin_src emacs-lisp
  (use-package indent-guide
    :config
    (indent-guide-global-mode))
#+end_src

** Sound
Disable ring bell (also visual indicator).
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

** Word wrap
Enable word wrap.
#+begin_src emacs-lisp
  (global-visual-line-mode t)
#+end_src

** Projectile
Project management.
#+begin_src emacs-lisp
    (use-package projectile
      :config
      (projectile-mode +1)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
      (setq projectile-project-search-path '("~/spaghetti/"))
      (projectile-discover-projects-in-search-path))
#+end_src
